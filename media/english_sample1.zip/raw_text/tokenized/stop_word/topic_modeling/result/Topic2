0.091*"introduction honored opportunity explain inside rev olutionary machine unraveling software program hard ware covers computer time complete book believe able answer following questions • programs written high level language c java trans lated langll ge hardwa hardwa execute resulting program comprehending concepts forms basis understanding aspects hardware software affect pro gram performance • interface software hardware softwa instruct hardware perform needed functions con cepts vital understanding write many kinds software • determines performance program ca n program mer improve performance see depends original program software translation program computer lan gll ge effectiveness hardware executing program • techniques used hardware designers improve perfor mance book introduce basic concepts modern computer design interested reader find much material topic advanced book computer architecture qllantitlltive approach without understanding answers questions improving perfor mance program modern computer evaluating features might make one computer better another particular application complex process trial error rather scientific procedure driven insight analysis first chapter lays foundation rest book introduces basic ideas definitions places major components software hard ware perspective introduces integrated circuits technology fuels computer revolution chapter later ones likely see lot new words words may heard sure mean panic yes lot special terminology used describing modern computers terminology acnlally helps since enables us describe pre acronym word constructed taking initial letters cisely function capability addition computer designers including string words example authors love using acronyms easy understand know ram acronym ran letters stand help remember locate terms included dom access memory cpu highlighted definition every term first time appears text acronym central pro short time working terminology fluent friends cessing unit
" + 0.091*"chapter computer abstractions technology persollal digital assistant computers video game digital television networks processors control modern airplane cargo ship embedded computing systems designed run one application one set related applications normally integrated hardware delivered single system thus despite large number embedded computers users never really see using computer embedded applications often unique application requirements com bine minimum performance stringent limitations cost power example consider cell phone processor need fast necessary handle limited function beyond minimizing cost power important objectives despite low cost embedded computers often least tolera nce fa ilure since results ca n vary upsetting new television crashes devastating might occur com puter plane car crashes consumer oriented embedded applications digital home appliance dependability achieved primarily simplicity emphasis one function perfectly possible large embedded systems techniques redundancy used servers often employed although book focuses general purpose computers concepts apply directly slight modifications embedded comput ers several places touch unique aspects embedded computers figure shows last several years growth number embedded computers much faster 0 compounded annual growth rate growth rate among desktop computers servers annually note embedded computers include cell phones video garnes digital tvs set top boxes personal digital assistants variety consumer devices note data include low end embedded control devices use bit bit processors elaboration elaborations short sections used throughout text provide detail particular subject may interest disinterested readers may skip elaboration since subsequent material never depend contents elaboration many embedded processors designed using processor cores version pro cessor written hardware description language verilog vhdl core allows designer integrate application specific hardware processor core fabrication single chip availability synthesis tools gener ate chip verilog specification together capacity modern silicon chips made special purpose processors highly attractive since core synthesized different semiconductor manufacturing lines using core provides flexibility choosing manufacturer well last years use cores
" + 0.091*"program first programmers communicated computers binary numbers tedious quickly invented new notations closer way humans think first notations translated bill ry hand process still tiresome using machine help program machine pioneers invented programs translate symbolic notation binary first programs named assembler program trans assembler program lates symbolic version instruction binary version example translates symbolic version instructions binary ver programmer would write sion add assembler would translate notation 000 00 0 00000 instruction tells computer add two numbers b name coined symbolic langll ge still used today assembly language assembly language sym although tremendous improvement assembly language still far bolic representation machine instructions notation scientist might like use simulate fluid flow accountant might use balance books assembly language requires programmer write one line every instruction machine follow forcing pro grammer think like machine recognition program could written translate powerful language computer instructions one great breakthroughs early days computing programmers today owe productivity sanity creation high level programming languages compilers high level programming translate programs languages instructions language portable language compiler enables programmer write high level language expression c fortran java com posed words algebraic b notation translated compiler assembly compiler would compile assembly language statement language add assembler would translate statement binary instruction tells computer add two numbers aand 000 00 0 00000 figure shows relationships among programs languages high level programming langll ges offer several important benefits first allow programmer think natural language using english words algebraic notation resulting programs look much like text like tables cryptic symbols see figure moreover allow languages
" + 0.091*"chapter computer abstractions technology computers led third revolution civilization information revolution taking place alongside agricultural industrial revolu tions resulting multiplication humankind intellectual strength reach naturally affected everyday lives profoundly also changed ways search new knowledge carried new vein sci entific investigation computational scientists joining theoretical experi mental scientists exploration new frontiers astronomy biology chemistry physics computer revolution continues time cost computing improves another factor 0 opportunities computers multiply applications economically infeasible suddenly become practical recent past following applications computer science fiction • automatic teller machines computer placed wall banks dis tribute collect cash would ridiculous concept 0s cheapest computer cost least 00 000 size car • computers automobiles microprocessors improved dramatically price performance early 0s computer control cars ludi crous today computers reduce pollution improve fuel efficiency via engine controls increase safety prevention dangerous skids inflation air bags protect occupants crash • laptop computers \ vllo would dreamed advances computer systems would lead laptop computers allowing students bring com puters coffeehouses airplanes • human genome project cost computer equipment map ana lyze human dna sequences hundreds millions dollars unlikely anyone would considered project computer costs 0 00 times higher would 0 0 years ago • world wide web existence time first edition book world wide web transformed society among uses distributing news sending flowers buying online catalogues taking electronic tours help pick vacation spots finding others share esoteric interests even mundane topics like finding lecture notes authors textbooks clearly advances technology affect almost every aspect society hardware advances allowed programmers create wonderfully useful soft ware explain computers omnipresent tomorrow science fiction computer applications cashless society automated intelligent highways genuinely ubiquitous computing one carries computers available everywhere
" + 0.091*"chapter computer abstractions technology figure simplified view hardware software hierarchical layers shown concentric circles hardware center applications software outermost complex applications often multiple layers application software weu example database system may run top systems software hosting application turn nms top database execute given sophistication modern programming languages simple instructions executed hardware translation high level language program hardwa instructions complex give brief view process return subject chapter high level language language hardware actually speak electronic machine need send electrical signals easiest signals fo r machines understand machine alphabet two letters letters english alphabet limit much ca n written two letters computer alphabet limit computers two symbols two letters num bers 0 commonly think machine language numbers base binary digit also called bit binary nllmbers refer letter binary digit bit computers one two numbers base slaves commands called instructions instructions 0 compo collections bits computer understands thought num nents information bers example bits 000 00 0 00000 tell one computer add two numbers chapter explains use numbers instructions data want steal chapter thunder using numbers instructions data foundation computing
" + 0.091*"chapter computer abstractions technology swap nt v nt high level k int emp language temp v n program v k v h c v k temp l j compiler assembly swa p language mlll add program lw 0 mips lw sw 0 sw j r j assembler binary machine 00000000 0 0000 00000000000 000 00000000000 000000 00000 0000 language 000 000 000 00000000000000000 program 000 00 00 00000000000000 00 mips 0 0 00 00 00000000000000000 0 0 000 000 00000000000000 00 000000 00000000000000000 000 figure c program complied assembly language assembled binary machine language although translation high·level language binary machine ian· guage shown tm steps compilers cut middleman produce binary machine language directly languages program examined detail chapter designed according intended use hence fortran designed sci entific computation cobol business data processing lisp symbol manipu lation oil second advantage programming languages improved programmer productivity one areas widespread agreement software develop ment takes less time develop programs written lan guages require fewer lines express idea conciseness clear advantage high level languages assembly language
" + 0.091*"0 chapter computer abstractions technology impressed correctly use words bios dimm cpu cache dram ata pci many others reinforce software hardware systems used run program affect performance use special section understanding program perfor mance throughout book first one appearing elements summarize important insights program performance understanding performance program depends combination effectiveness algorithms used program software systems used create trans program late program machine instructions effectiveness computer performance executing instructions may include operations following table summarizes hardware software affect performance hardware software component affects component performance topic covered algorithm detennines number source level books statements number operations executed programming language detennines numberof machine instructions chapters compiler architecture source~evel statement processor memory detennines fast instructions chapters system executed system hardware detennines fast operations may chapter operating system executed check check sections designed help readers assess whether comprehended major concepts introduced chapter understand implications concepts check questions simple answers others discussion among group answers specific ques tions found end chapter check questions appear end section making easy skip sure stand material section showed number embedded processors sold every year greatly outnumbers number desktop processors con firm deny insight based experience try count number embedded processors home compare number desktop computers home
" + 0.091*"introduction 000 00 00 figure number distinct processors sold 00 counts obtained somewhat diffefently caution fequired interpfeting results example totals fof desktops servers count complete computer systems fraction include ntultiple pfocessors number processors sold somewhat highef probably 0 0 total since sefvers ntay average mofe one processof per system afe desktop sales afe pfedominantly single processof systents totals fof entbedded computers actu ally count pfocessors ntany even visible sonte cases ntay multiple pfoces sors pef device growing fast example embedded processors cores 00 embedded processors cores furthermore overall growth rate embedded market 0 per year growth primarily driven cores compounded annual growth rate figure shows major architectures sold markets counts architecture across three types products embedded desktop server bit bit processors included although bit proces sors vast majority architectures
" + 0.091*"introduction classes computing applications characteristics although common set hardware technologies discussed sections used computers ranging smart home appliances cell phones largest supercomputers different applications different design requirements employ core hardware technologies different ways broadly speaking computers used three different classes applications desktop computers possibly best known form computing desktop computer com characterized personal computer readers book puter designed use individual usually incorporat probably used extensively desktop computers emphasize delivering good perfor inga graphics display keyboard mance single user low cost usually used execute third party soft mouse ware also called shrink wrap software desktop computing one largest markets computers evolution many computing technologies driven class computing 0 years old servers modern form mainframes minicomputers server computer used supercomputers usually accessed via network servers ori running larger programs ented carrying large workloads may consist either single complex multiple users often simulta neously typically accessed applications usually scientific engineering application handling many via network small jobs would occur building large web server applications often based software another source database simulation system often modified customized particular function servers built basic technology desktop computers provide greater expa ndability computing input output capacity see chapter performance server measured several different ways depending application interest general servers also place greater emphasis dependability since crash usually costly would single user desktop computer servers span widest range cost capability low end server supercomputer class computers highest per may little desktop machine without screen keyboard formance cost cost thousand dollars low end servers typically used file stor configured servers typi age small business applications simple web serving extreme cally cost millions ofdollars supercomputers present consist hundreds thousands pro terabyte originally cessors usually gigabytes terabytes memory terabytes petabytes 0 0 bytes storage cost millions hundreds millions dollars supercomputers although communications usually used high end scientific engineering calculations secondary storage systems weather forecasting oil exploration protein structure determination redefined mean large scale problems although supercomputers represent peak com 000 000 000 000 0 bytes puting capability relatively small fraction servers relatively embedded computer com small fraction overall computer market terms total revenue puter inside another device used embedded computers largest class computers span widest rulming one predetermined range applications performance embedded computers include micro application collection ofsoft processors found washing machine car computers cell phone ware
" + 0.091*"chapter computer abstractions technology figure sales microprocessors 00 instruction set archi tecture combining uses category refers processors either application specific customized architectures case ofarm roughly 0 ofthe sales cell phones arm core used conjunction application specific logic chip learn book successful programmers always concerned performance programs getting results user quickly critical creating successful software 0s 0s primary constraint computer performance size computer memory thus programmers often followed simple credo minimize memory space make programs fast last decade advances computer design memory technology greatly reduced importance small memory size applications embedded computing systems programmers interested performance need understand issues replaced simple memory model 0s hierarchical nature memories parallel nanlfe processors programmers seek build competitive versions compilers operating systems databases even applications therefore need increase knowledge computer orga ni zation
"