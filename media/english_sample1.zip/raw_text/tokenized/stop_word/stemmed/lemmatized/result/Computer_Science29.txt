below your program the first programmers communicated to computers in binary numbers but this was so tedious that they quickly invented new notations that were closer to the way humans think at first these notations were translated to bill ry by hand but this process was still tiresome using the machine to help program the machine the pioneers invented programs to translate from symbolic notation to binary the first of these programs was named an assembler this program trans assembler a program that lates a symbolic version of an instruction into the binary version for example the translates a symbolic version of instructions into the binary ver programmer would write sion add a s and the assembler would translate this notation into 000 00 0 00000 this instruction tells the computer to add the two numbers a and b the name coined for this symbolic langll ge still used today is assembly language assembly language a sym although a tremendous improvement assembly language is still far from the bolic representation of machine instructions notation a scientist might like to use to simulate fluid flow or that an accountant might use to balance the books assembly language requires the programmer to write one line for every instruction that the machine will follow forcing the pro grammer to think like the machine the recognition that a program could be written to translate a more powerful language into computer instructions was one of the great breakthroughs in the early days of computing programmers today owe their productivity and their sanity to the creation of high level programming languages and compilers that high level programming translate programs in such languages into instructions language a portable language a compiler enables a programmer to write this high level language expression such as c fortran or java com posed of words and algebraic a b notation that can be translated by a compiler into assembly the compiler would compile it into this assembly language statement language add a s the assembler would translate this statement into the binary instruction that tells the computer to add the two numbers aand s 000 00 0 00000 figure shows the relationships among these programs and languages high level programming langll ges offer several important benefits first they allow the programmer to think in a more natural language using english words and algebraic notation resulting in programs that look much more like text than like tables of cryptic symbols see figure moreover they allow languages to
